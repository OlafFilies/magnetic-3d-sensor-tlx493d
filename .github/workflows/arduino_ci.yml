name: Arduino CI

# on which event should we start push, pull request or schedule dispatches
on:
  - push
  - pull_request

# This template runes multiple workflows
jobs:


  # The build job compiles the sample code for different boards
  make:

    # we run this on self hosted runner, use labels to be more specific
    # add specific names if there are some, otherwise self-hosted, X64, Linux are the default ones
    runs-on:
      - self-hosted
      - X64
      - Linux

    # which combination of sample code and boards should run
    # for this example of 2 sample codes and 3 boards a total of 2x3=6 runners have to work.
    # if we have only 4 runner then these 4 are started and the last 2 are waiting until they can start
    strategy:

      matrix:
        # List of all examples in the lib to compile
        example: [
          TLx493D_A1B6,
          TLx493D_A2B6,
          TLx493D_P2B6,
          TLx493D_W2B6,
          TLx493D_W2BW,
          TLx493D_P3B6,
          TLx493D_P3I8,
        ]

        # board packages we want to run
        # attention the matrix spans over the fqbn not platform so that we can choose different boards
        fqbn: [
          "Infineon:xmc:XMC1100_XMC2GO",
        ]

        include:
          - fqbn:      "Infineon:xmc:XMC1100_XMC2GO"
            platform:  "infineon:xmc"
            port_name: "port_serial.0"
            device:    "device.0"

    # These are the steps which should run for each combination of fqbn and example code
    steps:
      # checkout the latest github action code
    - name: Checkout actions
      uses: actions/checkout@v4

      # checkout the latest arduino-cli compiler
    - name: Setup Arduino CLI
      uses: arduino/setup-arduino-cli@master

    # prepare the runner for the repo data
    # setup links inside the self hosted runner for correct directory setup
    # REPO is the base name of the library which is linked to the right directory structure
    # check wether the .arduino15 packages dir is available
    - name: Set and check environment, install repos
      run: |
        export REPO="$(basename "$GITHUB_REPOSITORY")"
        mkdir -p ~/.arduino15/packages/
        ln -sfn /opt/XMC-for-Arduino ~/.arduino15/packages/Infineon
        mkdir -p "$HOME/Arduino/libraries"
        ln -sf $GITHUB_WORKSPACE/ $HOME/Arduino/libraries/$REPO

    # Update the arduino code. Attention this does not setup XMC packages as this are set inside the self hosted runner
    # the arduino board support packages can be updated automatically
    # the XMC board support package is only linked inside the self hosted runner, which allows
    # to use none official and beta versions
    - name: Install/Update Arduino Platform
      run: |
        arduino-cli core update-index
        arduino-cli core install ${{ matrix.platform }}

      # Flashes the compiled HEX file onto the selected MCU
      # REPO: the name of the repository which is also the link name
      # HEXNAME: the board depended name of the HEX files
      # SERIAL_NUM: the unique serial number of the hardware board according the board2port.yaml
      # DEVICE: the flashing device according the board2port.yaml
      # PORT: real PORT name of the attached hardware based on the SERIAL_NUM
      # use the python based XMC flasher
    - name: Flash
      run: |
        cd /opt/runner_support/
        export REPO="$(basename "$GITHUB_REPOSITORY")"
        export HEXNAME=`tr ':' '.' <<<"${{ matrix.fqbn }}"`

        export SERIAL_NUM=`cat ./board2port.yaml | shyaml get-value $HEXNAME.$REPO.${{ matrix.port_name}}`
        export DEVICE=`cat ./board2port.yaml | shyaml get-value $HEXNAME.$REPO.${{ matrix.device}}`
        export PORT=`./find_usb.sh $SERIAL_NUM`

        export TYPE=`cat ./board2port.yaml | shyaml get-value $HEXNAME.$REPO.type`
        export SENSOR=$(echo $TYPE | tr "_" "\n" | tail -1)

        echo "Repo name extracted: " $REPO
        echo "Build HEX name:      " $HEXNAME
        echo "Board type name:     " $TYPE
        echo "Sensor name          " $SENSOR
        echo "Port Serial Num:     " $SERIAL_NUM
        echo "Port found:          " $PORT
        echo "Flash device:        " $DEVICE

        if [ "${{ matrix.example }}" = "$TYPE" ]; then
          cd $HOME/Arduino/libraries/$REPO
          make FQBN=${{ matrix.fqbn }} PORT=$PORT $SENSOR_needsSensor
        else
          echo "No"
          return 0
        fi


  monitor:
    runs-on:
        - self-hosted
        - X64
        - Linux
    if: success()

    strategy:
        # flashing only one by one 
        max-parallel: 1

        matrix:
          # List of all examples in the lib to compile
          example: [
            TLx493D_A1B6,
            TLx493D_A2B6,
            TLx493D_P2B6,
            TLx493D_W2B6,
            TLx493D_W2BW,
            TLx493D_P3B6,
            TLx493D_P3I8,
          ]
  
          # board packages we want to run
          # attention the matrix spans over the fqbn not platform so that we can choose different boards
          fqbn: [
            "Infineon:xmc:XMC1100_XMC2GO",
          ]
  
          include:
            - fqbn:      "Infineon:xmc:XMC1100_XMC2GO"
              platform:  "infineon:xmc"
              port_name: "port_serial.0"
              device:    "device.0"
  
      # These are the steps which should run for each combination of fqbn and example code
      steps:
        # checkout the latest github action code
      - name: Checkout actions
        uses: actions/checkout@v4
  
        # checkout the latest arduino-cli compiler
      - name: Setup Arduino CLI
        uses: arduino/setup-arduino-cli@master
  
      # prepare the runner for the repo data
      # setup links inside the self hosted runner for correct directory setup
      # REPO is the base name of the library which is linked to the right directory structure
      # check wether the .arduino15 packages dir is available
      - name: Set and check environment, install repos
        run: |
          echo 'Here'
