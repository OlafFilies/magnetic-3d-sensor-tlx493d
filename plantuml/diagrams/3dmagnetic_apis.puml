@startuml


class SensorAPIGen1 {
  
    -- Methods --

  stdbool setRegister(uint16_t register, uint8_t numBytes, uint8_t byteArray[])
  stdbool getRegister(uint16_t register, uint8_t numBytes, uint8_t byteArray[])

  stdbool enableTemperature()
  stdbool disableTemperature()
  double  getTemperature()

  stdbool getFieldValues(double *x, double *y, double *z)

  stdbool setSamplingMode(access_mode_t mode)
  stdbool setUpdateRate(update_rate_t value)

  stdbool reset(reset_t r)

  stdbool enableInterrupt()
  stdbool disableInterrupt()


  -- Attributes --

  map_name_to_double_t fieldCompensationCoefficients
  map_name_to_double_t temperatureCompensationCoefficients
}



class SensorAPIGen2 {
  
    -- Methods --

  stdbool setRegister(uint16_t register, uint8_t numBytes, uint8_t byteArray[])
  stdbool getRegister(uint16_t register, uint8_t numBytes, uint8_t byteArray[])

  stdbool enableTemperature()
  stdbool disableTemperature()
  double  getTemperature()

  stdbool getFieldValues(double *x, double *y, double *z)

  stdbool setSamplingMode(access_mode_t mode)
  stdbool setUpdateRate(update_rate_t value)

  stdbool reset(reset_t r)

  stdbool enableInterrupt()
  stdbool disableInterrupt()

  stdbool enableWakeup()
  stdbool disableWakeup()
  stdbool setWakeupThresholds(uint16_t xLower, uint16_t xUpper,
                              uint16_t yLower, uint16_t yUpper,
                              uint16_t zLower, uint16_t zUpper)

  uint64_t getSensorType()
  uint64_t getSensorRevision()


  -- Attributes --

  map_name_to_double_t fieldCompensationCoefficients
  map_name_to_double_t temperatureCompensationCoefficients
}



class SensorAPIGen3 {
  
    -- Methods --

  stdbool setRegister(uint16_t register, uint8_t numBytes, uint8_t byteArray[])
  stdbool getRegister(uint16_t register, uint8_t numBytes, uint8_t byteArray[])

  stdbool enableTemperature()
  stdbool disableTemperature()
  double  getTemperature()

  stdbool getFieldValues(double *x, double *y, double *z)

  stdbool setSamplingMode(access_mode_t mode)
  stdbool setUpdateRate(update_rate_t value)

  stdbool reset(reset_t r)

  stdbool enableInterrupt()
  stdbool disableInterrupt()

  stdbool enableWakeup()
  stdbool disableWakeup()
  stdbool setWakeupThresholds(uint16_t xLower, uint16_t xUpper,
                              uint16_t yLower, uint16_t yUpper,
                              uint16_t zLower, uint16_t zUpper)

  uint64_t getChipID()


  -- Attributes --

  map_name_to_double_t fieldCompensationCoefficients
  map_name_to_double_t temperatureCompensationCoefficients
}

@enduml
